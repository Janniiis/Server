name: CI/CD Pipeline

# Definiert die Ereignisse, die den Workflow auslösen
on:
  push:
    branches:
      - main  # Der Workflow wird bei einem Push auf den main-Branch ausgeführt
  pull_request:
    branches:
      - main  # Auch bei Pull Requests für den main-Branch

jobs:
  build:
    runs-on: ubuntu-latest  # Der Workflow läuft auf einer Ubuntu-VM

    steps:
      # 1. Checkout des Codes
      - name: Checkout code
        uses: actions/checkout@v2
        
      # 2. Docker Buildx Setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      # 3. Docker Cache für Buildschritte einrichten (optional, verbessert die Performance)
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      # 4. Docker Image bauen
      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .

      # 5. Docker Image testen
      - name: Run Tests in Docker container
        run: docker run my-app:${{ github.sha }} npm test  # Beispiel mit npm, wenn du z.B. Node.js benutzt
      
      # 6. Docker Hub Login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # 7. Docker Image pushen
      - name: Push Docker image to Docker Hub
        run: docker push my-app:${{ github.sha }}
        
      # Optional: 8. Deploy auf Produktionsumgebung (hier als Beispiel)
      - name: Deploy to Production Server
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.PROD_SERVER }} << 'EOF'
          docker pull my-app:${{ github.sha }}
          docker-compose down
          docker-compose up -d
          EOF
        env:
          PROD_SERVER: ${{ secrets.PROD_SERVER }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
